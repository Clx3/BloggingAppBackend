package fi.tuni.bloggingapp.security;

/**
 * Token object. Contains token as a string, and token type. Works as main authorization.
 *
 * @author Joonas Salojarvi
 * @version 2019.04.22
 * @since 0.1
 */
public class Token {

    /**
     * Token as string
     */
    private String token;

    /**
     * User type
     */
    private UserType type;

    /**
     * Last time the token was refreshed. Old token are automatically removed by TokenService.
     */
    private long refreshed;

    public Token(){

    }

    /**
     * @return Token string
     */
    public String getToken(){
        return token;
    }

    /**
     * Sets new token. New token is generated by token service.
     * @param token New token
     * @param type User type for this token.
     */
    public void setToken(String token, UserType type){
        this.token = token;
        this.setType(type);
        refresh();
    }

    /**
     * Checks if requested token equals this token.
     * @param requested token
     * @return true / false
     */
    public boolean equals(String requested) {
        if(token.equals(requested))
            return true;

        return false;
    }

    /**
     * Check permissions
     * @return UserType assinged to this token
     */
    public UserType getType(){
        return type;
    }

    /**
     * Sets user type for this token.
     * @param type UserType
     */
    public void setType(UserType type){
        this.type = type;
    }

    /**
     * Refreshes token, so it doesn't expire prematurely.
     */
    public void refresh(){
        refreshed = System.currentTimeMillis();
    }

    /**
     * Returns last time the token was refreshed.
     * @return last time refreshed
     */
    public long getLatestRefresh(){
        return refreshed;
    }


}
